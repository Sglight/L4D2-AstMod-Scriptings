/**
 * Called when a new round begins.
 *
 * @noreturn
 */
forward OnRoundStart();

/**
 * Called when a round ends.
 *
 * @noreturn
 */
forward OnRoundEnd();

/**
 * Is the second round of this map currently being played?
 *
 * @return bool
 */
stock bool:InSecondHalfOfRound() {
    return bool:GameRules_GetProp("m_bInSecondHalfOfRound");
}

/**
 * @brief Called whenever CDirectorVersusMode::EndVersusModeRound(bool) is invoked
 *
 * @param countSurvivors	True if the survival multiplier count needs to be nonzero. I guess.
 * @remarks Not sure what bool does exactly yet. Just monitor it. If true, survivors will be counted for multiplier. If false, survival multiplier will be set to 0.
 * @remarks A lot of Score calculations happen on this function, and the round-end scoreboard comes up doing this. Don't block unless you're sure you can reproduce this logic.
 * 
 * @return 		Pl_Handled to block, Pl_Continue otherwise
 * @remarks 阻止之后等待算分，灭团切换为coop可重启，
 */
forward Action:L4D2_OnEndVersusModeRound(bool:countSurvivors);

/**
 * @brief Called after CDirectorVersusMode::EndVersusModeRound(bool)
 * @remarks Called after all score calculations inside CDirectorVersusMode::EndVersusModeRound(bool). This good forward to replace standard "round_end" hook.
 * 
 * @return 		noreturn
 */
forward void L4D2_OnEndVersusModeRound_Post();

/**
 * @brief Called whenever CTerrorGameRules::ClearTeamScores(bool) is invoked
 * @remarks 	This resets the map score at the beginning of a map, and by checking 
 *                the campaign scores on a small timer you can see if they were reset as well.
 * 
 * @param newCampaign  if true then this is a new campaign, if false a new chapter
 * @return 		Pl_Handled to block scores from being cleared, Pl_Continue otherwise.
 */
forward Action:L4D_OnClearTeamScores(bool:newCampaign);

/**
 * @brief Called whenever CTerrorGameRules::SetCampaignScores(int,int) is invoked
 * @remarks The campaign scores are updated after the 2nd round is completed
 * 
 * @param scoreA  score of logical team A
 * @param scoreB  score of logical team B
 * @return 		Pl_Handled to block campaign scores from being set, Pl_Continue otherwise.
 */
forward Action:L4D_OnSetCampaignScores(&scoreA, &scoreB);

/**
 * @brief Sets the campaign scores stored in the Versus Director
 * @remarks These are the actual values used for campaign scores--not proxies
 * 
 * @param scores 		Array of campaign scores to set the director's values to.
 * @noreturn 				
 */
native L4D2_SetVersusCampaignScores(const scores[2]);

void GameRules_SetProp(const char[] prop, any value, int size, int element, bool changeState)
	Parameters
	const char[] prop
	Property name.

	any value
	Value to set.

	int size
	Number of bytes to write (valid values are 1, 2, or 4). This value is auto-detected, and the size parameter is only used as a fallback in case detection fails.

	int element
	Element # (starting from 0) if property is an array.

	bool changeState
	This parameter is ignored.

GameRules_SetProp("m_iSurvivorScore", 0, 4, 0, true);
GameRules_SetProp("m_iSurvivorScore", 0, 4, 1, true);
GameRules_SetProp("m_iCampaignScore", 0, 4, 0, true);
GameRules_SetProp("m_iCampaignScore", 0, 4, 1, true);
GameRules_SetProp("m_iChapterScore", 0, 4, 0, true);
GameRules_SetProp("m_iChapterScore", 0, 4, 1, true);
GameRules_SetProp("m_iChapterDamage", 0, 4, 0, true);
GameRules_SetProp("m_iChapterDamage", 0, 4, 1, true);

GameRules_SetProp("m_iScavengeTeamScore", 0, 4, 0, true);
GameRules_SetProp("m_iScavengeTeamScore", 0, 4, 1, true);
GameRules_SetProp("m_iScavengeTeamScore", 0, 4, 2, true);
GameRules_SetProp("m_iScavengeTeamScore", 0, 4, 3, true);
GameRules_SetProp("m_iScavengeTeamScore", 0, 4, 4, true);
GameRules_SetProp("m_iScavengeTeamScore", 0, 4, 5, true);
GameRules_SetProp("m_iScavengeTeamScore", 0, 4, 6, true);
GameRules_SetProp("m_iScavengeTeamScore", 0, 4, 7, true);
GameRules_SetProp("m_iScavengeTeamScore", 0, 4, 8, true);
GameRules_SetProp("m_iScavengeTeamScore", 0, 4, 9, true);

GameRules_SetProp("m_iScavengeMatchScore", 0, 4, 0, true);
GameRules_SetProp("m_iScavengeMatchScore", 0, 4, 1, true);
GameRules_SetPropFloat("m_flTeamRoundTime", 0.0, 0, true);
GameRules_SetPropFloat("m_flTeamRoundTime", 0.0, 1, true);
GameRules_SetProp("m_iVersusDistancePerSurvivor", 0, 4, 0, true);
GameRules_SetProp("m_iVersusDistancePerSurvivor", 0, 4, 1, true);
GameRules_SetProp("m_iVersusDistancePerSurvivor", 0, 4, 2, true);
GameRules_SetProp("m_iVersusDistancePerSurvivor", 0, 4, 3, true);
GameRules_SetProp("m_iVersusDistancePerSurvivor", 0, 4, 4, true);
GameRules_SetProp("m_iVersusDistancePerSurvivor", 0, 4, 5, true);
GameRules_SetProp("m_iVersusDistancePerSurvivor", 0, 4, 6, true);
GameRules_SetProp("m_iVersusDistancePerSurvivor", 0, 4, 7, true);

GameRules_SetProp("m_iVersusSurvivorDeathDistance", -1, 4, 0, true);
GameRules_SetProp("m_iVersusSurvivorDeathDistance", -1, 4, 1, true);
GameRules_SetProp("m_iVersusSurvivorDeathDistance", -1, 4, 2, true);
GameRules_SetProp("m_iVersusSurvivorDeathDistance", -1, 4, 3, true);
GameRules_SetProp("m_iVersusSurvivorDeathDistance", -1, 4, 4, true);
GameRules_SetProp("m_iVersusSurvivorDeathDistance", -1, 4, 5, true);
GameRules_SetProp("m_iVersusSurvivorDeathDistance", -1, 4, 6, true);
GameRules_SetProp("m_iVersusSurvivorDeathDistance", -1, 4, 7, true);

GameRules_SetProp("m_iVersusSurvivalMultiplier", 0, 4, 0, true);
GameRules_SetProp("m_iVersusSurvivalMultiplier", 0, 4, 1, true);
GameRules_SetProp("m_iVersusDefibsUsed", 0, 4, 0, true);
GameRules_SetProp("m_iVersusDefibsUsed", 0, 4, 1, true);
GameRules_SetProp("m_bInIntro", 0, 4, 0, true);
GameRules_SetPropFloat("m_flRoundStartTime", 0.0, 0, true);
GameRules_SetPropFloat("m_flRoundEndTime", 0.0, 0, true);
GameRules_SetPropFloat("m_flAccumulatedTime", 90.0, 0, true);
GameRules_SetProp("m_nRoundNumber", 0, 4, 0, true);
GameRules_SetProp("m_nRoundLimit", 3, 4, 0, true);

GameRules_SetProp("m_iWinningTeamNumber", 0, 4, 0, true);
GameRules_SetProp("m_iWinningTeamNumber", 0, 4, 1, true);
GameRules_SetProp("m_iWinningTeamNumber", 0, 4, 2, true);
GameRules_SetProp("m_iWinningTeamNumber", 0, 4, 3, true);
GameRules_SetProp("m_iWinningTeamNumber", 0, 4, 4, true);
GameRules_SetPropFloat("m_flTeamBestRoundTime", 0.0, 0, true);
GameRules_SetPropFloat("m_flRoundDuration", 0.0, 0, true);
GameRules_SetProp("m_nScavengeItemsRemaining", 0, 4, 0, true);
GameRules_SetProp("m_nScavengeItemsGoal", 0, 4, 0, true);
GameRules_SetProp("m_bAreTeamsFlipped", 0, 4, 0, true);
GameRules_SetProp("m_bInSecondHalfOfRound", 0, 4, 0, true);
GameRules_SetProp("m_bIsTransitioningToNextMap", 0, 4, 0, true);
GameRules_SetProp("m_bIsVersusVoteRestarting", 0, 4, 0, true);
GameRules_SetProp("m_iSacrificeEscapees", 0, 4, 0, true); 